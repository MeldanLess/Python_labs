Вопросы.
1. Описать 5 методов списков.
append(x) — добавляет элемент x в конец списка.
extend(iterable) — расширяет список, добавляя все элементы из другого итерабельного объекта (например, списка, строки и т.д.).
insert(i, x) — вставляет элемент x в позицию i. Если i больше длины списка, элемент добавляется в конец.
remove(x) — удаляет первое вхождение элемента x в список. Если элемент не найден, возникает ошибка.
pop(i) — удаляет и возвращает элемент на позиции i. Если индекс не передан, удаляет последний элемент списка.
---------------------------------------------------
2. Опишите известные Вам способы задать список.
Прямое указание элементов:
my_list = [1, 2, 3, 4]

Использование функции list() для создания списка из итерируемого объекта:
my_list = list("hello")  # ['h', 'e', 'l', 'l', 'o']

Список с повторяющимися элементами с использованием умножения:
my_list = [0] * 5  # [0, 0, 0, 0, 0]

Использование генераторов списка:
my_list = [x**2 for x in range(5)]  # [0, 1, 4, 9, 16]

Использование функции range() для создания списка чисел:
my_list = list(range(1, 6))  # [1, 2, 3, 4, 5]
---------------------------------------------------
3. Приведите 5 способов добавить элементы в список.
append():
my_list = [1, 2, 3]
my_list.append(4)  # [1, 2, 3, 4]

insert():
my_list = [1, 2, 3]
my_list.insert(1, 4)  # [1, 4, 2, 3]

extend():
my_list = [1, 2, 3]
my_list.extend([4, 5])  # [1, 2, 3, 4, 5]

Использование оператора + для добавления элементов:
my_list = [1, 2, 3]
my_list = my_list + [4, 5]  # [1, 2, 3, 4, 5]

Использование оператора * для повторяющихся элементов:
my_list = [1, 2]
my_list += [3] * 3  # [1, 2, 3, 3, 3]
---------------------------------------------------
4. Опишите особенности работы с индексами в списке на python.
Доступ к элементам: Индексы начинаются с 0, то есть первый элемент списка имеет индекс 0.
my_list = [10, 20, 30]
print(my_list[0])  # 10

Отрицательные индексы: Можно использовать отрицательные индексы для обращения к элементам с конца списка.
print(my_list[-1])  # 30

Модификация элементов: Можно изменять элементы списка по индексу.
my_list[1] = 50  # [10, 50, 30]

Срезы: Индексы можно использовать для получения подсписков.
print(my_list[1:3])  # [50, 30]

Индексы за пределами списка: Если указать индекс, который выходит за пределы списка, Python выдаст ошибку IndexError.
my_list = [10, 20, 30]
print(my_list[5])  # IndexError







